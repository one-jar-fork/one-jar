<?xml version="1.0" encoding="UTF-8"?>
<project name="one-jar-jdbc" basedir="." default="build">

    <!-- Hook into One-Jar project -->
    <property name="one-jar.dir" location="../one-jar"/>
    <import file="${one-jar.dir}/build.onejar.xml"/>
    
	<property name="eclipse.jar-in-jar.dir" value="build-lib/eclipse"/>
	<property name="temp.dir" value="temp" />	
    <path id="libraries">
        <pathelement location="lib/jdbc-2.0.jar" />
        <pathelement location="lib/aopalliance.jar" />
    </path>
    
    <target name="mkdirs">
        <mkdir dir="${test.results.dir}" />
        <mkdir dir="${test.reports.dir}"/>
    	<mkdir dir="classes/src"/>
        <mkdir dir="classes/test"/>
    </target>

	<target name="build" depends="clean, mkdirs, compile, build.one-jar-jdbc" />

	<target name="clean">
		<delete dir="classes" />
		<mkdir dir="classes" />
	</target>

	<target name="compile" depends="mkdirs">
        <javac destdir="classes/src" includes="**/*.java" debug="true">
            <src path="src" />
            <classpath refid="libraries" />
            <classpath refid="one-jar.libraries"/>
            <classpath path="${one-jar.build.ant}/example"/>
        </javac>
        <javac destdir="classes/test" includes="**/*.java" debug="true">
            <src path="test" />
            <classpath refid="libraries" />
            <classpath refid="one-jar.libraries"/>
            <!-- Uses Invoker to set up a JUnit test bridge -->
            <classpath path="${one-jar.build.ant}/test"/>
        	<classpath path="classes/src"/>
        </javac>
	</target>

	<!-- One Jar is troublesome because of Jdbc problems: http://bit.ly/anGc7a -->
	<target name="build.one-jar-jdbc">
		<mkdir dir="build"/>
		<one-jar destfile="build/${test}-one-jar-jdbc.jar">
            <manifest>
                <attribute name="Main-Class" value="com.simontuffs.onejar.Boot"/>
            	<attribute name="One-Jar-Main-Class" value="com.simontuffs.onejar.test.jdbc.main.Main"/>
            </manifest>
			<main>
				<fileset dir="classes/src"/>
                <fileset dir="${one-jar.build.ant}/example" includes="**/Testable.class"/>
			</main>
			<lib>
				<fileset dir="lib" includes="*.jar" />
			</lib>
		</one-jar>
		<delete dir="${temp.dir}" />
	</target>

    <property name="formatter" value="xml" />

    <!-- Test the distribution -->
    <target name="test" depends="build" description="Test the build">
        <antcall target="test.one-jar-jdbc" />
        <antcall target="junit.report"/>   
    </target>
   
    <target name="test.one-jar-jdbc" depends="build" description="Test OneJar Jdbc">
        <echo>********** test-one-jar-jdbc.jar</echo>
        <junit fork="yes" showoutput="no" printsummary="yes">
            <jvmarg value="-Done-jar.verbose=true" />
            <jvmarg value="-Done-jar.jarname=${basedir}/build/${test}-one-jar-jdbc.jar" />
            <classpath>
                <fileset file="${basedir}/build/${test}-one-jar-jdbc.jar" />
                <path refid="one-jar.libraries"/>
            	<path location="classes/test" />
            </classpath>

            <!-- Uses Invoker to set up a JUnit test bridge -->
            <classpath path="${one-jar.build.ant}/test"/>
            <test name="com.simontuffs.onejar.jdbc.test.SelfTestOneJarJdbc" todir="${test.results.dir}" outfile="one-jar-SelfTestOneJarJdbc" />
            <formatter type="${formatter}" usefile="yes" />
        </junit>
    </target>

    <target name="run.one-jar-jdbc" depends="build.one-jar-jdbc" description="Run a Eclipse Jar Jdbc">
        <java fork="true" jar="build/test-one-jar-jdbc.jar"/>
    </target>
	
</project>
